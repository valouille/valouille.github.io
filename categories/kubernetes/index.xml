<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kubernetes on VaLouille</title><link>https://valouille.github.io/categories/kubernetes/</link><description>Recent content in kubernetes on VaLouille</description><generator>Hugo -- gohugo.io</generator><language>fr</language><copyright>Val√©rian Beaudoin</copyright><lastBuildDate>Fri, 23 Aug 2019 12:37:00 +0100</lastBuildDate><atom:link href="https://valouille.github.io/categories/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>Force all pods in a specific namespace to schedule on defined hosts with Kubernetes</title><link>https://valouille.github.io/post/2019-08-23-force-pods-in-a-specific-namespace-to-schedule-on-defined-nodes-with-kubernetes/</link><pubDate>Fri, 23 Aug 2019 12:37:00 +0100</pubDate><guid>https://valouille.github.io/post/2019-08-23-force-pods-in-a-specific-namespace-to-schedule-on-defined-nodes-with-kubernetes/</guid><description>Sometimes, we need to stick pods to specific hosts to isolate business critical workloads from others, or take advantage of different server types. We can do it by assigning a critical taint on a node as follows (critical can be changed to whatever you like):
kubectl taint nodes node1 role=critical:NoSchedule or using kops, on a newly created critical InstanceGroup :
spec: taints: - role=critical:NoSchedule Nodes having this taint won&amp;rsquo;t schedule any pods that don&amp;rsquo;t have a toleration assigned to them.</description></item></channel></rss>